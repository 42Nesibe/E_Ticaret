<?phpclass uyelik {	private $oop;	function __construct() {		$this->oop = new helper();	}	            /*     Login admin paneline giriş fonksiyonu     */	public function login($data) 	{        $db = $this->oop;		try 		{						$sorgu = $db->prepare("select * from admin_panel where k_adi=? and sifre=? ");			$sorgu->execute(array($data["user"],$data["pass"]));			$yaz = $sorgu -> fetch(PDO::FETCH_ASSOC);						if(is_array($yaz)) {								$_SESSION["K"] = $yaz;				$_SESSION["Giris"] = "OK";				$cikti = array("durum"=>true, "msg" => ('Giriş Yapıldı...'));                $str = "".$_SESSION["K"]["k_adi"]." kullanıcısı giriş yaptı.";                $user = $_SESSION["K"]["k_adi"];                $ip = $db->GetIP();                $veri = array('islem'=>$str,"islemi_yapan"=>$user,"islem_yapilan_ip"=>$ip,"k_id"=>$_SESSION["K"]["admin_panel_iD"]);                $log = $db->insert("log",$veri);			} else {				$cikti = array("durum"=>false, "msg" => ('Kullanıcı Adı veya Şifreniz Yanlış...<br>Ihr Benutzername oder Passwort falsch...'));			}			return $cikti;						} catch(PDOException $ex) 		{			return array("durum" => false, "msg" => $ex->getMessage());		}	}	public function users($data)	{        $db = $this->oop;		try		{			$sorgu = $db->prepare("select * from users where k_adi=? and sifre=? ");			$sorgu->execute(array($data["user"],$data["pass"]));			$yaz = $sorgu -> fetch(PDO::FETCH_ASSOC);			if(is_array($yaz)) {				$_SESSION["users"] = $yaz; // burası kullanıcı session oluşturma				$_SESSION["kontrol"] = "yes"; // Burası giriş session				$cikti = array("durum"=>true, "msg" => ('Giriş Yapıldı...'));                $str = "".$_SESSION["users"]["k_adi"]." kullanıcısı giriş yaptı.";                $user = $_SESSION["users"]["k_adi"];                $ip = $db->GetIP();                $veri = array('islem'=>$str,"islemi_yapan"=>$user,"islem_yapilan_ip"=>$ip,"k_id"=>$_SESSION["users"]["admin_panel_iD"]);                $log = $db->insert("log",$veri);			} else {				$cikti = array("durum"=>false, "msg" => ('Kullanıcı Adı veya Şifreniz Yanlış...'));			}			return $cikti;		} catch(PDOException $ex)		{			return array("durum" => false, "msg" => $ex->getMessage());		}	}    public function foto_galeri()    {        $sql = $this->oop->prepare("Select count(*) as toplam from foto_galeri ");        $sql->execute();        return $sql->fetchAll(PDO::FETCH_ASSOC);    }    public function foto_galeri_al($sayfalama,$sayfa_basina) {        $sql = $this->oop-> prepare("select * from foto_galeri   limit {$sayfalama},{$sayfa_basina}");        $sql -> execute();        return $sql -> fetchAll(PDO::FETCH_ASSOC);    }			//tüm verileri al	public function veri_al($tablo) {		return $this->oop->fetch_all($tablo);	}    	//sil fonksiyonu	public function Sil($tablo,$tablo_id,$id)	{		try 		{			$this->oop->delete($tablo,$tablo_id,$id);			return array("durum"=>true, "msg" => "Silindi");		}		  catch(PDOException $ex) 		{			return array("durum" => false, "msg" => $ex->getMessage());		}	}    public function tekli_cek($tablo,$tablo_id,$id)	{		$sql = $this->oop->prepare("Select * from {$tablo} where {$tablo_id}=?");		$sql->execute(array($id));		return $sql->fetch(PDO::FETCH_ASSOC);	}    public function coklu_coklu($tablo,$tablo_id,$id)    {        $sql = $this->oop->prepare("Select * from {$tablo} where {$tablo_id}=?");        $sql->execute(array($id));        return $sql->fetchAll(PDO::FETCH_ASSOC);    }        /*sorgu çek*/    public function query($sorgu) {        return $this->oop->queryAll($sorgu);    }    public function galeri_foto($id,$grup)	{		$sql = $this->oop->prepare("Select * from foto where id=".$id." and grup=".$grup);		$sql->execute();		return $sql->fetchAll(PDO::FETCH_ASSOC);	}	//kaydet fonksiyonu	public function Kaydet($tablo,$data) 	{		try 		{			$pid = $this->oop->insert($tablo,$data);			return array("durum"=>true, "msg" => 'Veriler Kaydedildi.. ID no = '.$pid);		}		  catch(PDOException $ex) 		{			return array("durum" => false, "msg" => $ex->getMessage());		}	}	    public function galeri_makbuz_ekle($data) {		try {		    $this->oop->insert("foto",$data);			return array("success"=>true, "msg" => 'Veriler Kaydedildi..');		}		  catch(PDOException $ex)		{			return array("success" => false, "msg" => $ex->getMessage());		}	}    public function galeri_makbuz_ekle1($data) {		try {		    $this->oop->insert("foto_galeri",$data);			return array("success"=>true, "msg" => 'Veriler Kaydedildi..');		}		  catch(PDOException $ex)		{			return array("success" => false, "msg" => $ex->getMessage());		}	}		public function guncelle($table, $dataPOST, $id, $val){	try {		$this->oop->update($table, $dataPOST, $id, $val);        return array("success"=>true, "msg" => 'Veriler Guncellendi..');        }          catch(PDOException $ex)         {            return array("success" => false, "msg" => $ex->getMessage());        } 	}    	public function veri_ekle($table, $dat){				return $this->oop->insert($table, $dat);	}    public function slider_index($baslik,$foto) {        try {            $data = array('baslik' => $baslik, 'foto' => $foto);           $id = $this->pdo->insert('index_slide', $data);            return $id;        }        catch(PDOException $ex)        {            return array("success" => false, "msg" => $ex->getMessage());        }    }    public function CokluResimSil($ResimAdi)    {        $this->DosyaSil($_SERVER["DOCUMENT_ROOT"] . "/images/foto/b/".$ResimAdi);        $this->DosyaSil($_SERVER["DOCUMENT_ROOT"] . "/images/foto/k/".$ResimAdi);        //if ($thumb) $this->DosyaSil($_SERVER["DOCUMENT_ROOT"] . "/images/urunler/".$urun."/" . $ResimAdi);        $this->oop->delete("foto", "foto", $ResimAdi);        return array("success" => true, "msg" => "silindi");    }    public function CokluResimSil1($ResimAdi)    {        $this->DosyaSil($_SERVER["DOCUMENT_ROOT"] . "/images/galeri/b/".$ResimAdi);        $this->DosyaSil($_SERVER["DOCUMENT_ROOT"] . "/images/galeri/k/".$ResimAdi);        //if ($thumb) $this->DosyaSil($_SERVER["DOCUMENT_ROOT"] . "/images/urunler/".$urun."/" . $ResimAdi);        $this->oop->delete("foto_galeri", "foto", $ResimAdi);        return array("success" => true, "msg" => "silindi");    }    public function GaleriResimSil($ResimAdi,$thumb=true)    {        $this->DosyaSil($_SERVER["DOCUMENT_ROOT"] . "/images/galeri/" . $ResimAdi);        if ($thumb) $this->DosyaSil($_SERVER["DOCUMENT_ROOT"] . "/images/galeri/" . $ResimAdi);        $this->oop->delete("galeri", "foto", $ResimAdi);        return array("success" => true, "msg" => "silindi");    }        public function ResimSil($ResimAdi) {        $this->DosyaSil( $_SERVER["DOCUMENT_ROOT"]."/images/makina_parki_galeri/".$ResimAdi);        $this->oop->delete("makina_parki_galeri","foto", $ResimAdi);        return array("success"=>true,"msg" => "silindi");    }		public function DosyaSil($dizin) {            if (file_exists($dizin)) {            chmod($dizin, 0755);            if (unlink($dizin))  { return "true";}            } else {                 return false;            }        }    function yazi_kisalt($kelime, $str = 10)    {        if (strlen($kelime) > $str)        {            if (function_exists("mb_substr")) $kelime = mb_substr($kelime, 0, $str, "UTF-8").'..';            else $kelime = substr($kelime, 0, $str).'..';        }        return $kelime;    }    function tarih($tarih){        $this->yil = substr($tarih,0,4);        $this->ay = substr($tarih,5,2);        $this->gun = substr($tarih,8,2);        $this->aylar = array("01"=>"Ocak", "02"=>"Şubat", "03"=>"Mart", "04"=>"Nisan", "05"=>"Mayıs", "06"=>"Haziran", "07"=>"Temmuz", "08"=>"Ağustos", "09"=>"Eylül", "10"=>"Ekim", "11"=>"Kasım", "12"=>"Aralık");        return $this->gun."-".$this->aylar[$this->ay]."-".$this->yil;    }    function tarih_almanca_ay($tarih){        $this->ay = substr($tarih,5,2);        $this->aylar = array("01"=>"January", "02"=>"February", "03"=>"March", "04"=>"April", "05"=>"May", "06"=>"June", "07"=>"July", "08"=>"August", "09"=>"September", "10"=>"October", "11"=>"November", "12"=>"December");        return $this->aylar[$this->ay];    }    function tarih_almanca_gun($tarih){        $this->gun = substr($tarih,8,2);        return $this->gun;    }    function GetIP(){        if(getenv("HTTP_CLIENT_IP")) {            $ip = getenv("HTTP_CLIENT_IP");        } elseif(getenv("HTTP_X_FORWARDED_FOR")) {            $ip = getenv("HTTP_X_FORWARDED_FOR");            if (strstr($ip, ',')) {                $tmp = explode (',', $ip);                $ip = trim($tmp[0]);            }        } else {            $ip = getenv("REMOTE_ADDR");        }        return $ip;    }    function htmlsil($ka)    {        $ka = str_replace(".html","",$ka);        $ka = str_replace(".htm","",$ka);        $ka = str_replace(".php","",$ka);        return $ka;    }    function komut_istek($komd) {        $istekURI = explode("/", $_SERVER['REQUEST_URI']);        $istekBetikAdi = explode("/", $_SERVER['SCRIPT_NAME']);        for ($i = 0; $i < sizeof($istekBetikAdi); $i++) {            if ($istekURI[$i] == $istekBetikAdi[$i]) {                unset($istekURI[$i]);            }            $komut = array_values($istekURI);        }        if (strlen($this->htmlsil($komut[0])) > 0) {            $kls = $komut[$komd];            $cikti = $kls;//htmlsil($kls);        } else {            $cikti = "index";        }        return $cikti;    }    public  function seo($title){        $TR=array('ç','Ç','ı','İ','ş','Ş','ğ','Ğ','ö','Ö','ü','Ü');        $EN=array('c','c','i','i','s','s','g','g','o','o','u','u');        $title= str_replace($TR,$EN,$title);        $title=mb_strtolower($title,'UTF-8');        $title=preg_replace('#[^-a-zA-Z0-9_, ]#','',$title);        $title=trim($title);        $title= preg_replace('#[-_ ]+#','-',$title);        return $title;    }    public  function seo1($title){        $TR=array('ç','Ç','ı','İ','ş','Ş','ğ','Ğ','ö','Ö','ü','Ü');        $EN=array('c','c','i','i','s','s','g','g','o','o','u','u');        $title= str_replace($TR,$EN,$title);        $title=mb_strtolower($title,'UTF-8');        $title=trim($title);        return $title;    }}?>